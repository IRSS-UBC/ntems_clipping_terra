terra::tmpFiles(remove = T)
print(Sys.time() - start_time)
}
map(list.files(folder, pattern = ".geojson$", full.names = T), process_ntems)
source("~/.active-rstudio-document", echo=TRUE)
for (aoi_path in list.files(folder, pattern = ".geojson$", full.name = T)) {
outpath <- dirname(aoi_path) %>%
here::here(tools::file_path_sans_ext(basename(aoi_path)))
# if you want a custom outpath, comment out if you want in the same folder
#outpath <- "Z:/ByUser/Muise/2014_bc_mosaics"
years <- c(2017:2020)
# years <- 2022
is_multiple_year <- length(years) > 1
# what to process?
vars <-
tibble(
VLCE = T,
# note - VLCE is always required when processing structure layers
proxies = F,
change_attribution = F,
change_metrics = F,
change_annual = F,
species = F,
topography = F,
lat = F,
lon = F,
climate = F,
age = F,
structure_basal_area = F,
structure_elev_cv = F,
structure_elev_mean = F,
structure_elev_p95 = F,
structure_elev_stddev = F,
structure_gross_stem_volume = F,
structure_loreys_height = F,
structure_percentage_first_returns_above_2m = F,
structure_percentage_first_returns_above_mean = F,
structure_total_biomass = T
) %>%
pivot_longer(cols = everything()) %>%
filter(value) %>%
pull(name)
# a template raster to project to. currently, if the region is >1 UTM zone, defaults to LCC
template <-
rast("D:\\Bud\\template_raster\\CA_forest_VLCE_2015.tif")
# template <- rast("Z:\\ByUser\\Muise\\bc-vlce-2015.tif")
#### end user inputs ####
# processing from here on, user not to adjust unless they are confident in what they are doing
aoi <- read_sf(aoi_path)
# aoi <- bcmaps::bc_bound_hres()
# if single zone, out crs should be that utm zone
out_crs <- st_crs(aoi)
source(here::here("scripts", "get_utm_masks.R")) # generates utmzone_all
source(here::here("scripts", "get_data_type.R")) # function to make sure files save properly, shamelessly stolen from piotr
source(here::here("scripts", "ntems_crop.R"))
to_process <- crossing(year = years, zone = utmzone_all, var = vars)
source(here::here("scripts", "generate_process_df.R"))
map2(process_df$path_in, process_df$path_out, ntems_crop)
if (length(utm_masks) >= 2) {
# this is just annoying regex to clean up the mosaic output names so we can then
# split based on the mosaic paths to operate on everything using map
# basically, sorry i did this to anyone who tries to read it in post
# i've tried to add human readable comments, but regex is tough
mosaic_dfs <- process_df %>%
mutate(
mosaic_path = str_replace(path_out, "\\d{2}[NS]", "mosaiced"),
# regex that checks for 1-2 numbers, the 1 letter, and turns it to mosaiced
mosaic_path = str_replace(mosaic_path, "UTM_\\d{2}[NS]_", ""),
# regex that checks for UTM_ 1-2 numbers, then a letter, then an underscore, and removes it
mosaic_path = str_replace(mosaic_path, "UTM\\d{2}[NS]_", ""),
# regex that checks for UTM 1-2 numbers, then a letter, then and underscore, and removes it
mosaic_path = str_replace(mosaic_path, "_\\d{2}[NS]_", "_")
# regex that checks for an underscore, 1-2 numbers, a letter, underscore, and replaces with an underscore
) %>%
group_split(mosaic_path)
source(here::here("scripts", "ntems_mosaic.R"))
#source(here::here("scripts", "scripts/ntems_mosaic_gdal.R"))
map(mosaic_dfs, ntems_mosaicer)
#map(mosaic_dfs, ntems_mosaicer_gdal)
}
terra::tmpFiles(remove = T)
print(Sys.time() - start_time)
}
start_time <- Sys.time()
library("tidyverse")
library("terra")
library("sf")
# temp file locations
terra_temp <-
"D:\\Temp" # save in variable because used in ntems_mosaic_gdal()
terraOptions(
memfrac = 0.75,
tempdir = terra_temp,
todisk = FALSE,
progress = 100
)
#### user inputs ####
aoi_path <- "Z:/ByUser/Muise/Ramon_AGB_sites/19UFT.geojson"
outpath <- dirname(aoi_path) %>%
here::here(tools::file_path_sans_ext(basename(aoi_path)))
# if you want a custom outpath, comment out if you want in the same folder
outpath <- "Z:/ByUser/Muise/2014_bc_mosaics"
years <- 2015
# years <- 2022
is_multiple_year <- length(years) > 1
# what to process?
vars <-
tibble(
VLCE = T,
# note - VLCE is always required when processing structure layers
proxies = T,
change_attribution = T,
change_metrics = T,
change_annual = F,
species = T,
topography = T,
lat = T,
lon = T,
climate = T,
age = T,
structure_basal_area = T,
structure_elev_cv = T,
structure_elev_mean = T,
structure_elev_p95 = T,
structure_elev_stddev = T,
structure_gross_stem_volume = T,
structure_loreys_height = T,
structure_percentage_first_returns_above_2m = T,
structure_percentage_first_returns_above_mean = T,
structure_total_biomass = T
) %>%
pivot_longer(cols = everything()) %>%
filter(value) %>%
pull(name)
# a template raster to project to. currently, if the region is >1 UTM zone, defaults to LCC
template <-
rast("D:\\Bud\\template_raster\\CA_forest_VLCE_2015.tif")
template <- rast("Z:\\ByUser\\Muise\\bc-vlce-2015.tif")
#### end user inputs ####
# processing from here on, user not to adjust unless they are confident in what they are doing
aoi <- read_sf(aoi_path)
aoi <- bcmaps::bc_bound_hres()
# if single zone, out crs should be that utm zone
out_crs <- st_crs(aoi)
source(here::here("scripts", "get_utm_masks.R")) # generates utmzone_all
source(here::here("scripts", "get_data_type.R")) # function to make sure files save properly, shamelessly stolen from piotr
source(here::here("scripts", "ntems_crop.R"))
utmzone_all <- utmzone_all[endsWith(utmzone_all, "S")]
utm_masks <- utm_masks[endsWith(names(utm_masks), "S")]
to_process <- crossing(year = years, zone = utmzone_all, var = vars)
source(here::here("scripts", "generate_process_df.R"))
# this is just annoying regex to clean up the mosaic output names so we can then
# split based on the mosaic paths to operate on everything using map
# basically, sorry i did this to anyone who tries to read it in post
# i've tried to add human readable comments, but regex is tough
mosaic_dfs <- process_df %>%
mutate(
mosaic_path = str_replace(path_out, "\\d{1,2}[NS]", "mosaiced"),
# regex that checks for 1-2 numbers, the 1 letter, and turns it to mosaiced
mosaic_path = str_replace(mosaic_path, "UTM_\\d{1,2}[NS]_", ""),
# regex that checks for UTM_ 1-2 numbers, then a letter, then an underscore, and removes it
mosaic_path = str_replace(mosaic_path, "UTM\\d{1,2}[NS]_", ""),
# regex that checks for UTM 1-2 numbers, then a letter, then and underscore, and removes it
mosaic_path = str_replace(mosaic_path, "_\\d{1,2}[NS]_", "_")
# regex that checks for an underscore, 1-2 numbers, a letter, underscore, and replaces with an underscore
) %>%
group_split(mosaic_path)
mosaic_dfs
process_df %>%
mutate(
mosaic_path = str_replace(path_out, "\\d{1,2}[NS]", "mosaiced"),
# regex that checks for 1-2 numbers, the 1 letter, and turns it to mosaiced
mosaic_path = str_replace(mosaic_path, "UTM_\\d{1,2}[NS]_", ""),
# regex that checks for UTM_ 1-2 numbers, then a letter, then an underscore, and removes it
mosaic_path = str_replace(mosaic_path, "UTM\\d{1,2}[NS]_", ""),
# regex that checks for UTM 1-2 numbers, then a letter, then and underscore, and removes it
mosaic_path = str_replace(mosaic_path, "_\\d{1,2}[NS]_", "_")
# regex that checks for an underscore, 1-2 numbers, a letter, underscore, and replaces with an underscore
) %>% filter(var == "species")
process_df %>%
mutate(
mosaic_path = str_replace(path_out, "\\d{1,2}[NS]", "mosaiced"),
# regex that checks for 1-2 numbers, the 1 letter, and turns it to mosaiced
mosaic_path = str_replace(mosaic_path, "UTM_\\d{1,2}[NS]_", ""),
# regex that checks for UTM_ 1-2 numbers, then a letter, then an underscore, and removes it
mosaic_path = str_replace(mosaic_path, "UTM\\d{1,2}[NS]_", ""),
# regex that checks for UTM 1-2 numbers, then a letter, then and underscore, and removes it
mosaic_path = str_replace(mosaic_path, "_\\d{1,2}[NS]_", "_")
# regex that checks for an underscore, 1-2 numbers, a letter, underscore, and replaces with an underscore
) %>% filter(var == "species") %>% select(path_out, mosaic_path)
# this is just annoying regex to clean up the mosaic output names so we can then
# split based on the mosaic paths to operate on everything using map
# basically, sorry i did this to anyone who tries to read it in post
# i've tried to add human readable comments, but regex is tough
mosaic_dfs <- process_df %>%
mutate(
mosaic_path = str_replace(path_out, "\\d{1,2}[NS]", "mosaiced"),
# regex that checks for 1-2 numbers, the 1 letter, and turns it to mosaiced
mosaic_path = str_replace(mosaic_path, "UTM_\\d{1,2}[NS]_", ""),
# regex that checks for UTM_ 1-2 numbers, then a letter, then an underscore, and removes it
mosaic_path = str_replace(mosaic_path, "UTM\\d{1,2}[NS]_", ""),
# regex that checks for UTM 1-2 numbers, then a letter, then and underscore, and removes it
mosaic_path = str_replace(mosaic_path, "_\\d{1,2}[NS]_", "_"),
# regex that checks for an underscore, 1-2 numbers, a letter, underscore, and replaces with an underscore,
mosaic_path = str_replace(mosaic_path, "_\\d{1,2}[NS]", "")
# regex that checks for an underscore, 1-2 numbers, a letter, and and removes it
) %>%
group_split(mosaic_path)
mosaic_dfs
# this is just annoying regex to clean up the mosaic output names so we can then
# split based on the mosaic paths to operate on everything using map
# basically, sorry i did this to anyone who tries to read it in post
# i've tried to add human readable comments, but regex is tough
mosaic_dfs <- process_df %>%
mutate(
mosaic_path = str_replace(path_out, "\\d{1,2}[NS]", "mosaiced"),
# regex that checks for 1-2 numbers, the 1 letter, and turns it to mosaiced
mosaic_path = str_replace(mosaic_path, "UTM_\\d{1,2}[NS]_", ""),
# regex that checks for UTM_ 1-2 numbers, then a letter, then an underscore, and removes it
mosaic_path = str_replace(mosaic_path, "UTM\\d{1,2}[NS]_", ""),
# regex that checks for UTM 1-2 numbers, then a letter, then and underscore, and removes it
mosaic_path = str_replace(mosaic_path, "_\\d{1,2}[NS]_", "_"),
# regex that checks for an underscore, 1-2 numbers, a letter, underscore, and replaces with an underscore,
mosaic_path = str_replace(mosaic_path, "_\\d{1,2}[NS]", "")
# regex that checks for an underscore, 1-2 numbers, a letter, and and removes it
) %>%
group_split(mosaic_path)
mosaic_dfs <- mosaic_dfs %>% filter(var %in% c("species", "age"))
mosaic_dfs <- mosaic_dfs %>% bind_rows() %>% filter(var %in% c("species", "age")) %>% group_split(mosaic_path)
mosaic_dfs
# this is just annoying regex to clean up the mosaic output names so we can then
# split based on the mosaic paths to operate on everything using map
# basically, sorry i did this to anyone who tries to read it in post
# i've tried to add human readable comments, but regex is tough
mosaic_dfs <- process_df %>%
mutate(
mosaic_path = str_replace(path_out, "\\d{1,2}[NS]", "mosaiced"),
# regex that checks for 1-2 numbers, the 1 letter, and turns it to mosaiced
mosaic_path = str_replace(mosaic_path, "UTM_\\d{1,2}[NS]_", ""),
# regex that checks for UTM_ 1-2 numbers, then a letter, then an underscore, and removes it
mosaic_path = str_replace(mosaic_path, "UTM\\d{1,2}[NS]_", ""),
# regex that checks for UTM 1-2 numbers, then a letter, then and underscore, and removes it
mosaic_path = str_replace(mosaic_path, "_\\d{1,2}[NS]_", "_"),
# regex that checks for an underscore, 1-2 numbers, a letter, underscore, and replaces with an underscore,
mosaic_path = str_replace(mosaic_path, "_\\d{1,2}[NS]", "")
# regex that checks for an underscore, 1-2 numbers, a letter, and and removes it
) %>%
group_split(mosaic_path)
mosaic_dfs <- mosaic_dfs %>% bind_rows() %>% filter(var %in% c("species", "age")) %>% group_split(mosaic_path)
mosaic_dfs
source(here::here("scripts", "ntems_mosaic.R"))
map(mosaic_dfs, ntems_mosaicer)
savehistory()
source("C:/Users/evanmuis/Desktop/ntems_clipping_terra-irss-ubc/scripts/whole_game.R", echo=TRUE)
"L://C2C_1984_2022/UTM_9S/Results/proxy_values/SRef_UTM9S_1985_proxy_v2.dat" %>% file.exists()
rast("L://C2C_1984_2022/UTM_9S/Results/proxy_values/SRef_UTM9S_1985_proxy_v2.dat")
source("C:/Users/evanmuis/Desktop/ntems_clipping_terra-irss-ubc/scripts/whole_game.R", echo=TRUE)
start_time <- Sys.time()
library("tidyverse")
library("terra")
library("sf")
# temp file locations
terra_temp <-
"D:\\Temp" # save in variable because used in ntems_mosaic_gdal()
dir.create(terra_temp, showWarnings = F)
terraOptions(
memfrac = 0.75,
tempdir = terra_temp,
todisk = FALSE,
progress = 100
)
#### user inputs ####
aoi_path <- "Z:/ByUser/Muise/HARRY/new_brunswick.gpkg"
outpath <- dirname(aoi_path) %>%
here::here(tools::file_path_sans_ext(basename(aoi_path)))
# if you want a custom outpath, comment out if you want in the same folder
outpath <- "D:/hayy/"
years <- c(1984:2022)
# years <- 2019
is_multiple_year <- length(years) > 1
is_multiple_year <- F
# what to process?
vars <-
tibble(
VLCE = F,
# note - VLCE is always required when processing structure layers
proxies = T,
change_attribution = F,
change_metrics = F,
change_annual = F,
species = F,
topography = F,
lat = F,
lon = F,
climate = F,
age = F,
structure_basal_area = F,
structure_elev_cv = F,
structure_elev_mean = F,
structure_elev_p95 = F,
structure_elev_stddev = F,
structure_gross_stem_volume = F,
structure_loreys_height = F,
structure_percentage_first_returns_above_2m = F,
structure_percentage_first_returns_above_mean = F,
structure_total_biomass = F
) %>%
pivot_longer(cols = everything()) %>%
filter(value) %>%
pull(name)
# a template raster to project to. currently, if the region is >1 UTM zone, defaults to LCC
template <-
rast("D:\\Bud\\template_raster\\CA_forest_VLCE_2015.tif")
# template <- rast("Z:\\ByUser\\Muise\\bc-vlce-2015.tif")
template <- rast("Z:/ByUser/Muise/HARRY/harry_example_img.tif")
#### end user inputs ####
# processing from here on, user not to adjust unless they are confident in what they are doing
aoi <- read_sf(aoi_path)
# if single zone, out crs should be that utm zone
out_crs <- st_crs(aoi)
source(here::here("scripts", "get_utm_masks.R")) # generates utmzone_all
source(here::here("scripts", "get_data_type.R")) # function to make sure files save properly, shamelessly stolen from piotr
source(here::here("scripts", "ntems_crop.R"))
print(paste0("AOI is located in ", length(utmzone_all), " UTM zones: "))
print(utmzone_all)
print("Note that letters N or S correspond to the internal NTEMS data division, not northern or southern hemishphere")
to_process <- crossing(year = years, zone = utmzone_all, var = vars)
source(here::here("scripts", "generate_process_df.R"))
map2(process_df$path_in, process_df$path_out, ntems_crop)
aoi <- aoi %>%
vect() %>%
project(template) %>%
st_as_sf()
aoi
# this is just annoying regex to clean up the mosaic output names so we can then
# split based on the mosaic paths to operate on everything using map
# basically, sorry i did this to anyone who tries to read it in post
# i've tried to add human readable comments, but regex is tough
mosaic_dfs <- process_df %>%
mutate(
mosaic_path = str_replace(path_out, "\\d{1,2}[NS]", "mosaiced"),
# regex that checks for 1-2 numbers, the 1 letter, and turns it to mosaiced
mosaic_path = str_replace(mosaic_path, "UTM_\\d{1,2}[NS]_", ""),
# regex that checks for UTM_ 1-2 numbers, then a letter, then an underscore, and removes it
mosaic_path = str_replace(mosaic_path, "UTM\\d{1,2}[NS]_", ""),
# regex that checks for UTM 1-2 numbers, then a letter, then and underscore, and removes it
mosaic_path = str_replace(mosaic_path, "_\\d{1,2}[NS]_", "_"),
# regex that checks for an underscore, 1-2 numbers, a letter, underscore, and replaces with an underscore,
mosaic_path = str_replace(mosaic_path, "_\\d{1,2}[NS]", "")
# regex that checks for an underscore, 1-2 numbers, a letter, and and removes it
) %>%
group_split(mosaic_path)
tibble <- mosaic_dfs[[1]]
aoi
mosaic_start <- Sys.time()
year <- tibble %>%
pull(year) %>%
unique()
var <- tibble %>%
pull(var) %>%
unique()
save_path <- tibble %>%
pull(mosaic_path) %>%
unique()
if(!overwrite & file.exists(save_path)) {
print("Don't overwrite, and file already exists")
return()
}
message()
print(paste("save path:", save_path))
print("mosaicing ------------------")
print(paste("zones:", toString(utmzone_all)))
print(paste("year:", year))
print(paste("variable:", var))
dir.create(dirname(save_path), showWarnings = F, recursive = T)
ref <- tibble %>%
head(1) %>%
pull(path_out)
dtype <- ref %>%
get_data_type()
print(paste("datatype:", dtype))
#print(paste("mosaicing at: ", save_path))
print("----------------------------")
print("Projecting rasters and vector masks")
utm_masks_proj <- utm_masks %>%
map(project, y = template)
rast_paths <- tibble %>%
pull(path_out)
proj_rasts <- rast_paths %>%
map(rast) %>%
map(.f = project, y = template,
align = T, method = "near", gdal = T, by_util = T, threads = T)
print("Masking")
masked_data <- proj_rasts %>%
map2(.x = ., .y = utm_masks_proj, .f = mask,
todisk = T)
print("Mosaicing")
mosaiced <- masked_data %>%
sprc() %>%
mosaic(fun = "max") %>%
crop(aoi)
plot(mosaiced)
if (length(utm_masks) >= 2) {
# this is just annoying regex to clean up the mosaic output names so we can then
# split based on the mosaic paths to operate on everything using map
# basically, sorry i did this to anyone who tries to read it in post
# i've tried to add human readable comments, but regex is tough
mosaic_dfs <- process_df %>%
mutate(
mosaic_path = str_replace(path_out, "\\d{1,2}[NS]", "mosaiced"),
# regex that checks for 1-2 numbers, the 1 letter, and turns it to mosaiced
mosaic_path = str_replace(mosaic_path, "UTM_\\d{1,2}[NS]_", ""),
# regex that checks for UTM_ 1-2 numbers, then a letter, then an underscore, and removes it
mosaic_path = str_replace(mosaic_path, "UTM\\d{1,2}[NS]_", ""),
# regex that checks for UTM 1-2 numbers, then a letter, then and underscore, and removes it
mosaic_path = str_replace(mosaic_path, "_\\d{1,2}[NS]_", "_"),
# regex that checks for an underscore, 1-2 numbers, a letter, underscore, and replaces with an underscore,
mosaic_path = str_replace(mosaic_path, "_\\d{1,2}[NS]", "")
# regex that checks for an underscore, 1-2 numbers, a letter, and and removes it
) %>%
group_split(mosaic_path)
source(here::here("scripts", "ntems_mosaic.R"))
#source(here::here("scripts", "scripts/ntems_mosaic_gdal.R"))
map(mosaic_dfs, ntems_mosaicer)
#map(mosaic_dfs, ntems_mosaicer_gdal)
}
source("C:/Users/evanmuis/Desktop/ntems_clipping_terra-irss-ubc/scripts/whole_game_bc.R", echo=TRUE)
source("C:/Users/evanmuis/Desktop/ntems_clipping_terra-irss-ubc/scripts/whole_game.R", echo=TRUE)
source("C:/Users/evanmuis/Desktop/ntems_clipping_terra-irss-ubc/scripts/whole_game.R", echo=TRUE)
source("C:/Users/evanmuis/Desktop/ntems_clipping_terra-irss-ubc/scripts/whole_game.R", echo=TRUE)
library("tidyverse")
start_time <- Sys.time()
library("tidyverse")
library("terra")
library("sf")
# temp file locations
terra_temp <-
"D:\\Temp" # save in variable because used in ntems_mosaic_gdal()
dir.create(terra_temp, showWarnings = F)
terraOptions(
memfrac = 0.75,
tempdir = terra_temp,
todisk = FALSE,
progress = 100
)
#### user inputs ####
aoi_path <- "Z:\ByUser\Muise\francois5\Study_Area_U_thirteenN.shp"
outpath <- dirname(aoi_path) %>%
here::here(tools::file_path_sans_ext(basename(aoi_path)))
years <- c(2002:2022)
years <- 2019
is_multiple_year <- length(years) > 1
# what to process?
vars <-
tibble(
VLCE = F,
# note - VLCE is always required when processing structure layers
proxies = F,
change_attribution = F,
change_metrics = F,
change_annual = F,
species = T,
topography = F,
lat = F,
lon = F,
climate = F,
age = F,
structure_basal_area = F,
structure_elev_cv = F,
structure_elev_mean = F,
structure_elev_p95 = F,
structure_elev_stddev = F,
structure_gross_stem_volume = F,
structure_loreys_height = F,
structure_percentage_first_returns_above_2m = F,
structure_percentage_first_returns_above_mean = F,
structure_total_biomass = F
) %>%
pivot_longer(cols = everything()) %>%
filter(value) %>%
pull(name)
# a template raster to project to. currently, if the region is >1 UTM zone, defaults to LCC
template <-
rast("D:\\Bud\\template_raster\\CA_forest_VLCE_2015.tif")
# processing from here on, user not to adjust unless they are confident in what they are doing
aoi <- read_sf(aoi_path)
# if single zone, out crs should be that utm zone
out_crs <- st_crs(aoi)
source(here::here("scripts", "get_utm_masks.R")) # generates utmzone_all
print(paste0("AOI is located in ", length(utmzone_all), " UTM zones: "))
print(utmzone_all)
print("Note that letters N or S correspond to the internal NTEMS data division, not northern or southern hemishphere")
to_process <- crossing(year = years, zone = utmzone_all, var = vars)
source(here::here("scripts", "generate_process_df.R"))
map2(process_df$path_in, process_df$path_out, ntems_crop)
aoi <- aoi %>%
vect() %>%
project(template) %>%
st_as_sf()
terra::tmpFiles(remove = T)
print(Sys.time() - start_time)
# processing from here on, user not to adjust unless they are confident in what they are doing
aoi <- read_sf(aoi_path)
source("C:/Users/evanmuis/Desktop/ntems_clipping_terra-irss-ubc/scripts/whole_game.R", echo=TRUE)
source("C:/Users/evanmuis/Desktop/ntems_clipping_terra-irss-ubc/scripts/whole_game_bc.R", echo=TRUE)
?terraOptions
terraOptions(
memfrac = 0.9,
tempdir = terra_temp,
todisk = T,
progress = 100
)
