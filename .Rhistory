years <- tibble %>%
pull(years) %>%
unique()
vars <- tibble %>%
pull(vars) %>%
unique()
print("mosaicing ---------------")
print(paste("zones:", toString(utmzone_all)))
print(paste("year:", years))
print(paste("variable:", vars))
save_path <- tibble %>%
pull(mosaic_path) %>%
unique()
dir.create(dirname(save_path), showWarnings = F, recursive = T)
ref <- tibble %>%
head(1) %>%
pull(path_out)
dtype <- ref %>%
get_data_type()
print(paste("datatype:", dtype))
rasts <- tibble %>%
pull(path_out) %>%
map(rast)
mosaiced <- map2(rasts, utm_masks, mask) %>%
map(project, y = template, align = T) %>%
sprc() %>%
mosaic()
cats(mosaiced) <- cats(rast(ref))
coltab(mosaiced) <- coltab(rast(ref))
writeRaster(mosaiced, filename = save_path,
datatype = dtype,
filetype = "ENVI",
overwrite = T)
print("mosaiced at:", save_path)
}
source(here::here("scripts", "ntems_mosaic.R"))
map(mosaic_dfs, ntems_mosaicer)
utmzone_all
list(utmzone_all)
length(utm_masks)
utm_masks
utm_masks[1]
length(utm_masks[1])
source("C:/Users/evanmuis/Desktop/ntems_cliping_terra/scripts/whole_game.R", echo=TRUE)
source("C:/Users/evanmuis/Desktop/ntems_cliping_terra/scripts/whole_game.R", echo=TRUE)
cats
?cats
if (length(utm_masks) >= 2) {
source(here::here("scripts", "ntems_mosaic.R"))
map(mosaic_dfs, ntems_mosaicer)
}
# this is just annoying regex to clean up the mosaic output names so we can then
# split based on the mosaic paths to operate on everything using map
mosaic_df <- process_df %>%
mutate(mosaic_path = str_replace(path_out, "[0-9]{2}[a-zA-Z]{1}", "mosaiced"),
mosaic_path = str_replace(mosaic_path, "UTM_[0-9]{2}[a-zA-Z]{1}_", ""),
mosaic_path = str_replace(mosaic_path, "UTM[0-9]{2}[a-zA-Z]{1}_", ""),
mosaic_path = str_replace(mosaic_path, "_[0-9]{2}[a-zA-Z]{1}_", "_"))
mosaic_dfs <- mosaic_df %>%
group_split(mosaic_path)
mosaic_dfs[[27]]
mosaic_dfs
mosaic_dfs[[39]]
tibble <- mosaic_dfs[[39]]
years <- tibble %>%
pull(years) %>%
unique()
vars <- tibble %>%
pull(vars) %>%
unique()
print("mosaicing ---------------")
print(paste("zones:", toString(utmzone_all)))
print(paste("year:", years))
print(paste("variable:", vars))
save_path <- tibble %>%
pull(mosaic_path) %>%
unique()
save_path
dir.create(dirname(save_path), showWarnings = F, recursive = T)
ref <- tibble %>%
head(1) %>%
pull(path_out)
dtype <- ref %>%
get_data_type()
print(paste("datatype:", dtype))
rasts <- tibble %>%
pull(path_out) %>%
map(rast)
mosaiced <- map2(rasts, utm_masks, mask) %>%
map(project, y = template, align = T) %>%
sprc() %>%
mosaic()
levels(mosaiced) <- levels(rast(ref))
coltab(mosaiced) <- coltab(rast(ref))
writeRaster(mosaiced, filename = save_path,
datatype = dtype,
filetype = "ENVI",
overwrite = T)
print(paste0("mosaiced at:", save_path))
groundhog::groundhog.library("tidyverse", "2022-02-15")
groundhog::groundhog.library("terra", "2022-02-15")
groundhog::groundhog.library("sf", "2022-02-15")
# temp file locations
terraOptions(tempdir = "D:/Temp")
# user inputs
aoi_path <- "Z:\\ByUser\\Muise\\ntems_testing\\nfld_proj.shp"
outpath <- dirname(aoi_path) %>%
here::here(tools::file_path_sans_ext(basename(aoi_path)))
years <- (2018:2019)
# what to process?
vars <- tibble(VLCE = T,  #note - VLCE is always required when processing structure layers
proxies = T,
change_attribution = T,
change_metrics = T,
structure_basal_area = T,
structure_elev_cv = T,
structure_elev_mean = T,
structure_elev_p95 = T,
structure_elev_stddev = T,
structure_gross_stem_volume = T,
structure_loreys_height = T,
structure_percentage_first_returns_above_2m = T,
structure_percentage_first_returns_above_mean = T,
structure_total_biomass = T) %>%
pivot_longer(cols = everything()) %>%
filter(value) %>%
pull(name)
# processing from here on, user not to adjust unless they are confident in what they are doing
aoi <- read_sf(aoi_path)
out_crs <- st_crs(aoi)
template <- rast("G:/Lambert_Conical_conformal/study_lcc/LCC_NAD83__area_to_process_0123.dat")
source(here::here("scripts", "get_utm_masks.R"))
source(here::here("scripts", "get_data_type.R"))
source(here::here("scripts", "ntems_crop.R"))
to_process <- crossing(years, utmzone_all, vars)
source(here::here("scripts", "generate_process_df.R"))
if (length(utm_masks) >= 2) {
source(here::here("scripts", "ntems_mosaic.R"))
map(mosaic_dfs, ntems_mosaicer)
}
if (length(utm_masks) >= 2) {
source(here::here("scripts", "ntems_mosaic.R"))
map(mosaic_dfs, ntems_mosaicer)
}
if (length(utm_masks) >= 2) {
source(here::here("scripts", "ntems_mosaic.R"))
map(mosaic_dfs, ntems_mosaicer)
}
years <- tibble %>%
pull(years) %>%
unique()
vars <- tibble %>%
pull(vars) %>%
unique()
print("mosaicing ------------------")
print("mosaicing ------------------")
print(paste("zones:", toString(utmzone_all)))
print(paste("year:", years))
print(paste("variable:", vars))
save_path <- tibble %>%
pull(mosaic_path) %>%
unique()
if (length(utm_masks) >= 2) {
source(here::here("scripts", "ntems_mosaic.R"))
map(mosaic_dfs, ntems_mosaicer)
}
if (length(utm_masks) >= 2) {
source(here::here("scripts", "ntems_mosaic.R"))
map(mosaic_dfs, ntems_mosaicer)
}
if (length(utm_masks) >= 2) {
source(here::here("scripts", "ntems_mosaic.R"))
map(mosaic_dfs, ntems_mosaicer)
}
# this is just annoying regex to clean up the mosaic output names so we can then
# split based on the mosaic paths to operate on everything using map
mosaic_df <- process_df %>%
mutate(mosaic_path = str_replace(path_out, "[0-9]{2}[a-zA-Z]{1}", "mosaiced"),
mosaic_path = str_replace(mosaic_path, "UTM_[0-9]{2}[a-zA-Z]{1}_", ""),
mosaic_path = str_replace(mosaic_path, "UTM[0-9]{2}[a-zA-Z]{1}_", ""),
mosaic_path = str_replace(mosaic_path, "_[0-9]{2}[a-zA-Z]{1}_", "_"))
mosaic_dfs <- mosaic_df %>%
group_split(mosaic_path)
tibble <- mosaic_dfs[[2]]
years <- tibble %>%
pull(years) %>%
unique()
vars <- tibble %>%
pull(vars) %>%
unique()
print("mosaicing ------------------")
print(paste("zones:", toString(utmzone_all)))
print(paste("year:", years))
print(paste("variable:", vars))
save_path <- tibble %>%
pull(mosaic_path) %>%
unique()
dir.create(dirname(save_path), showWarnings = F, recursive = T)
ref <- tibble %>%
head(1) %>%
pull(path_out)
dtype <- ref %>%
get_data_type()
print(paste("datatype:", dtype))
print("----------------------------")
rasts <- tibble %>%
pull(path_out) %>%
map(rast)
mosaiced <- map2(rasts, utm_masks, mask) %>%
map(project, y = template, align = T) %>%
sprc() %>%
mosaic()
levels(mosaiced) <- levels(rast(ref))
coltab(mosaiced) <- coltab(rast(ref))
levels(rast(ref))
coltab(mosaiced)
install.packages("furrr")
groundhog::groundhog.library("furrr", "2022-02-15")
?plan
plan(multiprocess, workers = 4)
plan(multisession, workers = 4)
?future_map2
groundhog::groundhog.library("tidyverse", "2022-02-15")
groundhog::groundhog.library("terra", "2022-02-15")
groundhog::groundhog.library("sf", "2022-02-15")
groundhog::groundhog.library("furrr", "2022-02-15")
# temp file locations
terraOptions(tempdir = "D:/Temp")
# user inputs
aoi_path <- "Z:\\ByUser\\Muise\\ntems_testing\\nfld_proj.shp"
outpath <- dirname(aoi_path) %>%
here::here(tools::file_path_sans_ext(basename(aoi_path)))
years <- (2018:2019)
# what to process?
vars <- tibble(VLCE = T,  #note - VLCE is always required when processing structure layers
proxies = T,
change_attribution = F,
change_metrics = T,
structure_basal_area = T,
structure_elev_cv = F,
structure_elev_mean = F,
structure_elev_p95 = F,
structure_elev_stddev = F,
structure_gross_stem_volume = F,
structure_loreys_height = F,
structure_percentage_first_returns_above_2m = F,
structure_percentage_first_returns_above_mean = F,
structure_total_biomass = F) %>%
pivot_longer(cols = everything()) %>%
filter(value) %>%
pull(name)
# a template raster to project to. currently, if the region is >1 UTM zone, defaults to LCC
template <- rast("G:/Lambert_Conical_conformal/study_lcc/LCC_NAD83__area_to_process_0123.dat")
# processing from here on, user not to adjust unless they are confident in what they are doing
aoi <- read_sf(aoi_path)
# if single zone, out crs should be that utm zone
out_crs <- st_crs(aoi)
plan(multisession, workers = 4)
source(here::here("scripts", "get_utm_masks.R")) # generates utmzone_all
source(here::here("scripts", "get_data_type.R")) # function to make sure files save properly
source(here::here("scripts", "ntems_crop.R"))
to_process <- crossing(years, utmzone_all, vars)
source(here::here("scripts", "generate_process_df.R"))
if (length(utm_masks) >= 2) {
source(here::here("scripts", "ntems_mosaic.R"))
future_map(mosaic_dfs, ntems_mosaicer)
}
source("C:/Users/evanmuis/Desktop/ntems_cliping_terra/scripts/whole_game.R", echo=TRUE)
source("C:/Users/evanmuis/Desktop/ntems_cliping_terra/scripts/whole_game.R", echo=TRUE)
source("C:/Users/evanmuis/Desktop/ntems_cliping_terra/scripts/whole_game.R", echo=TRUE)
if (length(utm_masks) >= 2) {
source(here::here("scripts", "ntems_mosaic.R"))
map(mosaic_dfs, ntems_mosaicer)
}
gc()
source("C:/Users/evanmuis/Desktop/ntems_cliping_terra/scripts/whole_game.R", echo=TRUE)
groundhog::groundhog.library("tidyverse", "2022-02-15")
groundhog::groundhog.library("terra", "2022-02-15")
groundhog::groundhog.library("sf", "2022-02-15")
# temp file locations
terraOptions(tempdir = "D:/Temp")
# user inputs
aoi_path <- "Z:\\ByUser\\Muise\\ntems_testing\\bc_boundary.shp"
outpath <- dirname(aoi_path) %>%
here::here(tools::file_path_sans_ext(basename(aoi_path)))
years <- (2018:2019)
# what to process?
vars <- tibble(VLCE = T,  #note - VLCE is always required when processing structure layers
proxies = T,
change_attribution = F,
change_metrics = F,
structure_basal_area = T,
structure_elev_cv = F,
structure_elev_mean = F,
structure_elev_p95 = F,
structure_elev_stddev = F,
structure_gross_stem_volume = F,
structure_loreys_height = F,
structure_percentage_first_returns_above_2m = F,
structure_percentage_first_returns_above_mean = F,
structure_total_biomass = F) %>%
pivot_longer(cols = everything()) %>%
filter(value) %>%
pull(name)
# a template raster to project to. currently, if the region is >1 UTM zone, defaults to LCC
template <- rast("G:/Lambert_Conical_conformal/study_lcc/LCC_NAD83__area_to_process_0123.dat")
# processing from here on, user not to adjust unless they are confident in what they are doing
aoi <- read_sf(aoi_path)
aoi
plot(aoi)
# a template raster to project to. currently, if the region is >1 UTM zone, defaults to LCC
template <- rast("G:/Lambert_Conical_conformal/study_lcc/LCC_NAD83__area_to_process_0123.dat")
start_time <- Sys.time()
library("tidyverse")
library("terra")
library("sf")
# temp file locations
terraOptions(tempdir = "D:/Temp")
#### user inputs ####
aoi_path <- "Z:\\ByUser\\Muise\\for_alex\\alex.shp"
outpath <- dirname(aoi_path) %>%
here::here(tools::file_path_sans_ext(basename(aoi_path)))
# if you want a custom outpath, comment out if you want in the same folder
outpath <- "D:\\Bud\\bap_alex"
years <- c(1984:2021)
years <- 2015
# what to process?
vars <- tibble(VLCE = F,  #note - VLCE is always required when processing structure layers
proxies = T,
change_attribution = F,
change_metrics = F,
topography = F,
structure_basal_area = F,
structure_elev_cv = F,
structure_elev_mean = F,
structure_elev_p95 = F,
structure_elev_stddev = F,
structure_gross_stem_volume = F,
structure_loreys_height = F,
structure_percentage_first_returns_above_2m = F,
structure_percentage_first_returns_above_mean = F,
structure_total_biomass = F) %>%
pivot_longer(cols = everything()) %>%
filter(value) %>%
pull(name)
# a template raster to project to. currently, if the region is >1 UTM zone, defaults to LCC
template <- rast("G:/Lambert_Conical_conformal/study_lcc/LCC_NAD83__area_to_process_0123.dat")
#### end user inputs ####
# processing from here on, user not to adjust unless they are confident in what they are doing
aoi <- read_sf(aoi_path)
# for alex processing
#aoi <- aoi %>% st_simplify(dTolerance = 10000)
# this is to reduce time for large multi feature polygons with many vertices
# some information is lost, but we generally dont care about it
aoi <- aoi %>% group_split(PRNAME) %>% map(st_bbox) %>% map(st_as_sfc) %>% map(st_as_sf) %>% bind_rows() %>% st_make_valid() %>% st_buffer(0)
# if single zone, out crs should be that utm zone
out_crs <- st_crs(aoi)
source(here::here("scripts", "get_utm_masks.R")) # generates utmzone_all
source(here::here("scripts", "get_data_type.R")) # function to make sure files save properly, shamelessly stolen from piotr
source(here::here("scripts", "ntems_crop.R"))
to_process <- crossing(year = years, zone = utmzone_all, var = vars)
source(here::here("scripts", "generate_process_df.R"))
if (length(utm_masks) >= 2) {
# this is just annoying regex to clean up the mosaic output names so we can then
# split based on the mosaic paths to operate on everything using map
mosaic_dfs <- process_df %>%
mutate(mosaic_path = str_replace(path_out, "[0-9]{1,2}[a-zA-Z]{1}", "mosaiced"),
mosaic_path = str_replace(mosaic_path, "UTM_[0-9]{1,2}[a-zA-Z]{1}_", ""),
mosaic_path = str_replace(mosaic_path, "UTM[0-9]{1,2}[a-zA-Z]{1}_", ""),
mosaic_path = str_replace(mosaic_path, "_[0-9]{1,2}[a-zA-Z]{1}_", "_")) %>%
group_split(mosaic_path)
source(here::here("scripts", "ntems_mosaic.R"))
map(mosaic_dfs, ntems_mosaicer)
}
terra::tmpFiles(remove = T)
print(Sys.time - start_time)
plot(aoi)
# processing from here on, user not to adjust unless they are confident in what they are doing
aoi <- read_sf(aoi_path)
# this is to reduce time for large multi feature polygons with many vertices
# some information is lost, but we generally dont care about it
aoi <- aoi %>% group_split(PRNAME) %>% map(st_bbox) %>% map(st_as_sfc) %>% map(st_as_sf) %>% bind_rows() %>% st_make_valid() %>% st_union()
plot(aoi)
source("C:/Users/evanmuis/Desktop/ntems_cliping_terra/scripts/whole_game.R", echo=TRUE)
source("C:/Users/evanmuis/Desktop/ntems_cliping_terra/scripts/whole_game.R", echo=TRUE)
?st_union
source("C:/Users/evanmuis/Desktop/ntems_cliping_terra/scripts/whole_game.R", echo=TRUE)
source("C:/Users/evanmuis/Desktop/ntems_cliping_terra/scripts/whole_game.R", echo=TRUE)
file.copy(in, to)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("C:/Users/evanmuis/Desktop/ntems_cliping_terra/scripts/whole_game.R", echo=TRUE)
file.exists("M://annual_forest_structure_unfitted_1984-2021/UTM_15S/elev_p95/UTM_15S_elev_p95_2020.dat")
to_process
view(to_process)
view(process_df)
process_df %>% tail(2)
process_df <- process_df %>% tail(4)
process_df
map2(process_df$path_in, process_df$path_out, ntems_crop)
to_process <- crossing(year = years, zone = utmzone_all, var = vars)
source(here::here("scripts", "generate_process_df.R"))
process_df
process_df %>% mutate(chech = file.exists(path_out)) %>% view
install.packages("terra")
install.packages("terra")
start_time <- Sys.time()
library("tidyverse")
library("terra")
library("sf")
# temp file locations
terraOptions(memfrac = 0.75,
tempdir = "D:\\temp",
todisk = T,
progress = 100)
#### user inputs ####
aoi_path <- "Z:\\ByUser\\Muise\\for_martin\\ON_NW_Boreal.shp"
outpath <- dirname(aoi_path) %>%
here::here(tools::file_path_sans_ext(basename(aoi_path)))
# if you want a custom outpath, comment out if you want in the same folder
#outpath <- "D:\\Bud\\bap_alex"
years <- c(1984:2021)
#years <- 2015
# what to process?
vars <- tibble(VLCE = T,  #note - VLCE is always required when processing structure layers
proxies = T,
change_attribution = T,
change_metrics = T,
topography = F,
lat = F,
lon = F,
structure_basal_area = F,
structure_elev_cv = F,
structure_elev_mean = F,
structure_elev_p95 = T,
structure_elev_stddev = F,
structure_gross_stem_volume = F,
structure_loreys_height = F,
structure_percentage_first_returns_above_2m = F,
structure_percentage_first_returns_above_mean = F,
structure_total_biomass = F) %>%
pivot_longer(cols = everything()) %>%
filter(value) %>%
pull(name)
# a template raster to project to. currently, if the region is >1 UTM zone, defaults to LCC
template <- rast("G:/Lambert_Conical_conformal/study_lcc/LCC_NAD83__area_to_process_0123.dat")
#### end user inputs ####
# processing from here on, user not to adjust unless they are confident in what they are doing
aoi <- read_sf(aoi_path)
# for alex processing
#aoi <- aoi %>% st_simplify(dTolerance = 10000)
# this is to reduce time for large multi feature polygons with many vertices
# some information is lost, but we generally dont care about it
#aoi <- aoi %>% group_split(PRNAME) %>% map(st_bbox) %>% map(st_as_sfc) %>% map(st_as_sf) %>% bind_rows() %>% st_make_valid() %>% st_buffer(0)
# if single zone, out crs should be that utm zone
out_crs <- st_crs(aoi)
source(here::here("scripts", "get_utm_masks.R")) # generates utmzone_all
source(here::here("scripts", "get_data_type.R")) # function to make sure files save properly, shamelessly stolen from piotr
source(here::here("scripts", "ntems_crop.R"))
to_process <- crossing(year = years, zone = utmzone_all, var = vars)
source(here::here("scripts", "generate_process_df.R"))
# this is just annoying regex to clean up the mosaic output names so we can then
# split based on the mosaic paths to operate on everything using map
# basically, sorry i did this to anyone who tries to read it in post
# i've tried to add human readable comments, but regex is tough
mosaic_dfs <- process_df %>%
mutate(mosaic_path = str_replace(path_out, "[0-9]{1,2}[a-zA-Z]{1}", "mosaiced"),
# regex that checks for 1-2 numbers, the 1 letter, and turns it to mosaiced
mosaic_path = str_replace(mosaic_path, "UTM_[0-9]{1,2}[a-zA-Z]{1}_", ""),
# regex that checks for UTM_ 1-2 numbers, then a letter, then an underscore, and removes it
mosaic_path = str_replace(mosaic_path, "UTM[0-9]{1,2}[a-zA-Z]{1}_", ""),
# regex that checks for UTM 1-2 numbers, then a letter, then and underscore, and removes it
mosaic_path = str_replace(mosaic_path, "_[0-9]{1,2}[a-zA-Z]{1}_", "_")
# regex that checks for an underscore, 1-2 numbers, a letter, underscore, and replaces with an underscore
) %>%
group_split(mosaic_path)
tibble <- mosaic_dfs[[1]]
sessionInfo()
year <- tibble %>%
pull(year) %>%
unique()
var <- tibble %>%
pull(var) %>%
unique()
save_path <- tibble %>%
pull(mosaic_path) %>%
unique()
print("mosaicing ------------------")
print(paste("zones:", toString(utmzone_all)))
print(paste("year:", year))
print(paste("variable:", var))
print(paste("save path:", save_path))
dir.create(dirname(save_path), showWarnings = F, recursive = T)
ref <- tibble %>%
head(1) %>%
pull(path_out)
dtype <- ref %>%
get_data_type()
print(paste("datatype:", dtype))
#print(paste("mosaicing at: ", save_path))
print("----------------------------")
rasts <- tibble %>%
pull(path_out) %>%
map(rast)
r <- rasts[[1]]
plot(r)
utm_masks[[1]]
m <- utm_masks[[1]]
plot(m)
plot(r)
plot(m, add = T)
mask(r, m)
