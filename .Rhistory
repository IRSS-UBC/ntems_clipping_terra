}
rasts_path <- list.dirs(save_loc, recursive = F)[[1]]
print(rasts_path)
mosaic_exists <- list.dirs(rasts_path, recursive = F) %>%
str_detect("mosaiced") %>%
any()
num_dats <- here::here(rasts_path, "mosaiced") %>%
list.files(recursive = T, pattern = ".dat$") %>%
length()
num_dats
for (rasts_path in list.dirs(save_loc, recursive = F)) {
print(rasts_path)
mosaic_exists <- list.dirs(rasts_path, recursive = F) %>%
str_detect("mosaiced") %>%
any()
if (mosaic_exists) {
num_dats <- here::here(rasts_path, "mosaiced") %>%
list.files(recursive = T, pattern = ".dat$") %>%
length()
if (num_dats != 0) {
next()
}
}
in_names <- list.files(
rasts_path,
pattern = ".dat$",
recursive = T,
full.names = T
)
out_names <- in_names %>%
str_replace("[0-9]{1,2}[a-zA-Z]{1}", "mosaiced") %>%
str_replace("UTM_[0-9]{1,2}[a-zA-Z]{1}_", "") %>%
str_replace("UTM[0-9]{1,2}[a-zA-Z]{1}_", "") %>%
str_replace("_[0-9]{1,2}[a-zA-Z]{1}_", "_")
out_names %>%
dirname() %>%
map(dir.create, recursive = T)
in_names %>%
map(rast) %>%
map(project,
y = template,
method = "near",
align = T) %>%
map2(
.x = .,
.y = out_names,
.f = writeRaster,
filetype = "envi"
)
print("saved")
}
out_names %>%
file.exists()
rasts_path = list.dirs(save_loc, recursive = F)[[1]]
rasts_path
in_names <- list.files(
rasts_path,
pattern = ".dat$",
recursive = T,
full.names = T
)
out_names <- in_names %>%
str_replace("[0-9]{1,2}[a-zA-Z]{1}", "mosaiced") %>%
str_replace("UTM_[0-9]{1,2}[a-zA-Z]{1}_", "") %>%
str_replace("UTM[0-9]{1,2}[a-zA-Z]{1}_", "") %>%
str_replace("_[0-9]{1,2}[a-zA-Z]{1}_", "_")
out_names %>%
file.exists()
in_names
?str_detect
in_names <- list.files(
rasts_path,
pattern = ".dat$",
recursive = T,
full.names = T
) %>%
str_subset("mosaiced")
in_names
in_names <- list.files(
rasts_path,
pattern = ".dat$",
recursive = T,
full.names = T
) %>%
str_subset(!"mosaiced")
in_names <- list.files(
rasts_path,
pattern = ".dat$",
recursive = T,
full.names = T
) %>%
str_subset("[0-9]{1,2}[a-zA-Z]{1}")
in_names
in_names <- list.files(
rasts_path,
pattern = ".dat$",
recursive = T,
full.names = T
) %>%
str_subset("/[0-9]{1,2}[a-zA-Z]{1}")
in_names
in_names <- list.files(
rasts_path,
pattern = ".dat$",
recursive = T,
full.names = T
) %>%
str_subset("/[0-9]{1,2}[a-zA-Z]{1}")
out_names <- in_names %>%
str_replace("[0-9]{1,2}[a-zA-Z]{1}", "mosaiced") %>%
str_replace("UTM_[0-9]{1,2}[a-zA-Z]{1}_", "") %>%
str_replace("UTM[0-9]{1,2}[a-zA-Z]{1}_", "") %>%
str_replace("_[0-9]{1,2}[a-zA-Z]{1}_", "_")
out_names
out_names %>%
file.exists()
out_names %>%
file.exists() %>%
all()
print(rasts_path)
in_names <- list.files(
rasts_path,
pattern = ".dat$",
recursive = T,
full.names = T
) %>%
str_subset("/[0-9]{1,2}[a-zA-Z]{1}")
out_names <- in_names %>%
str_replace("[0-9]{1,2}[a-zA-Z]{1}", "mosaiced") %>%
str_replace("UTM_[0-9]{1,2}[a-zA-Z]{1}_", "") %>%
str_replace("UTM[0-9]{1,2}[a-zA-Z]{1}_", "") %>%
str_replace("_[0-9]{1,2}[a-zA-Z]{1}_", "_")
mosaic_exists <- out_names %>%
file.exists() %>%
all()
if(mosaic_exists) {
print("already mosaiced/transformed")
next()
}
for (rasts_path in list.dirs(save_loc, recursive = F)) {
print(rasts_path)
in_names <- list.files(
rasts_path,
pattern = ".dat$",
recursive = T,
full.names = T
) %>%
str_subset("/[0-9]{1,2}[a-zA-Z]{1}")
out_names <- in_names %>%
str_replace("[0-9]{1,2}[a-zA-Z]{1}", "mosaiced") %>%
str_replace("UTM_[0-9]{1,2}[a-zA-Z]{1}_", "") %>%
str_replace("UTM[0-9]{1,2}[a-zA-Z]{1}_", "") %>%
str_replace("_[0-9]{1,2}[a-zA-Z]{1}_", "_")
mosaic_exists <- out_names %>%
file.exists() %>%
all()
if(mosaic_exists) {
print("already mosaiced/transformed")
next()
}
out_names %>%
dirname() %>%
map(dir.create, recursive = T)
in_names %>%
map(rast) %>%
map(project,
y = template,
method = "near",
align = T) %>%
map2(
.x = .,
.y = out_names,
.f = writeRaster,
filetype = "envi"
)
print("saved")
}
source("C:/Users/evanmuis/Desktop/ntems_cliping_terra/scripts/whole_game_loop.R", echo=TRUE)
input_list
for (aoi_path in input_list[[6:]]) {
for (aoi_path in input_list[[6:length(input_list)]]) {
print(aoi_path)
outpath <- dirname(aoi_path) %>%
here::here(tools::file_path_sans_ext(basename(aoi_path)))
aoi <- read_sf(aoi_path) %>%
st_make_valid()
# if single zone, out crs should be that utm zone
out_crs <- st_crs(aoi)
source(here::here("scripts", "get_utm_masks.R")) # generates utmzone_all
source(here::here("scripts", "get_data_type.R")) # function to make sure files save properly, shamelessly stolen from piotr
source(here::here("scripts", "ntems_crop.R"))
to_process <-
crossing(year = years, zone = utmzone_all, var = vars)
source(here::here("scripts", "generate_process_df.R"))
map2(process_df$path_in, process_df$path_out, ntems_crop)
if (length(utm_masks) >= 2) {
# this is just annoying regex to clean up the mosaic output names so we can then
# split based on the mosaic paths to operate on everything using map
# basically, sorry i did this to anyone who tries to read it in post
# i've tried to add human readable comments, but regex is tough
mosaic_dfs <- process_df %>%
mutate(
mosaic_path = str_replace(path_out, "[0-9]{1,2}[a-zA-Z]{1}", "mosaiced"),
# regex that checks for 1-2 numbers, the 1 letter, and turns it to mosaiced
mosaic_path = str_replace(mosaic_path, "UTM_[0-9]{1,2}[a-zA-Z]{1}_", ""),
# regex that checks for UTM_ 1-2 numbers, then a letter, then an underscore, and removes it
mosaic_path = str_replace(mosaic_path, "UTM[0-9]{1,2}[a-zA-Z]{1}_", ""),
# regex that checks for UTM 1-2 numbers, then a letter, then and underscore, and removes it
mosaic_path = str_replace(mosaic_path, "_[0-9]{1,2}[a-zA-Z]{1}_", "_")
# regex that checks for an underscore, 1-2 numbers, a letter, underscore, and replaces with an underscore
) %>%
group_split(mosaic_path)
source(here::here("scripts", "ntems_mosaic.R"))
#source(here::here("scripts", "scripts/ntems_mosaic_gdal.R"))
map(mosaic_dfs, ntems_mosaicer)
#map(mosaic_dfs, ntems_mosaicer_gdal)
}
terra::tmpFiles(remove = T)
}
input_list
input_list[[6]]
input_list[[6:11]]
input_list[[6,11]]
tail(input_list)
for (aoi_path in tail(input_list)) {
print(aoi_path)
outpath <- dirname(aoi_path) %>%
here::here(tools::file_path_sans_ext(basename(aoi_path)))
aoi <- read_sf(aoi_path) %>%
st_make_valid()
# if single zone, out crs should be that utm zone
out_crs <- st_crs(aoi)
source(here::here("scripts", "get_utm_masks.R")) # generates utmzone_all
source(here::here("scripts", "get_data_type.R")) # function to make sure files save properly, shamelessly stolen from piotr
source(here::here("scripts", "ntems_crop.R"))
to_process <-
crossing(year = years, zone = utmzone_all, var = vars)
source(here::here("scripts", "generate_process_df.R"))
map2(process_df$path_in, process_df$path_out, ntems_crop)
if (length(utm_masks) >= 2) {
# this is just annoying regex to clean up the mosaic output names so we can then
# split based on the mosaic paths to operate on everything using map
# basically, sorry i did this to anyone who tries to read it in post
# i've tried to add human readable comments, but regex is tough
mosaic_dfs <- process_df %>%
mutate(
mosaic_path = str_replace(path_out, "[0-9]{1,2}[a-zA-Z]{1}", "mosaiced"),
# regex that checks for 1-2 numbers, the 1 letter, and turns it to mosaiced
mosaic_path = str_replace(mosaic_path, "UTM_[0-9]{1,2}[a-zA-Z]{1}_", ""),
# regex that checks for UTM_ 1-2 numbers, then a letter, then an underscore, and removes it
mosaic_path = str_replace(mosaic_path, "UTM[0-9]{1,2}[a-zA-Z]{1}_", ""),
# regex that checks for UTM 1-2 numbers, then a letter, then and underscore, and removes it
mosaic_path = str_replace(mosaic_path, "_[0-9]{1,2}[a-zA-Z]{1}_", "_")
# regex that checks for an underscore, 1-2 numbers, a letter, underscore, and replaces with an underscore
) %>%
group_split(mosaic_path)
source(here::here("scripts", "ntems_mosaic.R"))
#source(here::here("scripts", "scripts/ntems_mosaic_gdal.R"))
map(mosaic_dfs, ntems_mosaicer)
#map(mosaic_dfs, ntems_mosaicer_gdal)
}
terra::tmpFiles(remove = T)
}
noquote("")
message()
map(mosaic_dfs, ntems_mosaicer)
source(here::here("scripts", "ntems_mosaic.R"))
map(mosaic_dfs, ntems_mosaicer)
source("C:/Users/evanmuis/Desktop/ntems_cliping_terra/scripts/whole_game_loop.R", echo=TRUE)
source("C:/Users/evanmuis/Desktop/ntems_cliping_terra/scripts/whole_game_loop.R", echo=TRUE)
warnings()
for (rasts_path in list.dirs(save_loc, recursive = F)) {
print(rasts_path)
in_names <- list.files(
rasts_path,
pattern = ".dat$",
recursive = T,
full.names = T
) %>%
str_subset("/[0-9]{1,2}[a-zA-Z]{1}")
out_names <- in_names %>%
str_replace("[0-9]{1,2}[a-zA-Z]{1}", "mosaiced") %>%
str_replace("UTM_[0-9]{1,2}[a-zA-Z]{1}_", "") %>%
str_replace("UTM[0-9]{1,2}[a-zA-Z]{1}_", "") %>%
str_replace("_[0-9]{1,2}[a-zA-Z]{1}_", "_")
mosaic_exists <- out_names %>%
file.exists() %>%
all()
if(mosaic_exists) {
print("already mosaiced/transformed")
next()
}
out_names %>%
dirname() %>%
map(dir.create, recursive = T)
in_names %>%
map(rast) %>%
map(project,
y = template,
method = "near",
align = T) %>%
map2(
.x = .,
.y = out_names,
.f = writeRaster,
filetype = "envi"
)
print("saved")
}
for (rasts_path in list.dirs(save_loc, recursive = F)) {
print(rasts_path)
in_names <- list.files(
rasts_path,
pattern = ".dat$",
recursive = T,
full.names = T
) %>%
str_subset("/[0-9]{1,2}[a-zA-Z]{1}")
out_names <- in_names %>%
str_replace("[0-9]{1,2}[a-zA-Z]{1}", "mosaiced") %>%
str_replace("UTM_[0-9]{1,2}[a-zA-Z]{1}_", "") %>%
str_replace("UTM[0-9]{1,2}[a-zA-Z]{1}_", "") %>%
str_replace("_[0-9]{1,2}[a-zA-Z]{1}_", "_")
mosaic_exists <- out_names %>%
file.exists() %>%
all()
if(mosaic_exists) {
print("already mosaiced/transformed")
next()
}
out_names %>%
dirname() %>%
map(dir.create, recursive = T)
in_names %>%
map(rast) %>%
map(project,
y = template,
method = "near",
align = T) %>%
map2(
.x = .,
.y = out_names,
.f = writeRaster,
filetype = "envi",
overwrite = T
)
print("saved")
}
warnings()
?dir.create
start_time <- Sys.time()
library("tidyverse")
library("terra")
library("sf")
# temp file locations
terra_temp <-
"D:\\Temp" # save in variable because used in ntems_mosaic_gdal()
terraOptions(
memfrac = 0.75,
tempdir = terra_temp,
todisk = FALSE,
progress = 100
)
#### user inputs ####
aoi_path <-
"Z:\\ByUser\\Muise\\francois2\\Shapefiles\\Study_Area_M_nineS.shp"
listed_shps <-
list.files(
"Z:\\ByUser\\Chris\\clips\\",
full.names = T,
pattern = ".shp$"
)
listed_shps
source("C:/Users/evanmuis/Desktop/ntems_cliping_terra/scripts/whole_game_loop_multishps.R", echo=TRUE)
source("C:/Users/evanmuis/Desktop/ntems_cliping_terra/scripts/whole_game_loop_multishps.R", echo=TRUE)
source("C:/Users/evanmuis/Desktop/ntems_cliping_terra/scripts/whole_game_loop_multishps.R", echo=TRUE)
source(here::here("scripts", "mosaic_masks.R"))
utmzone_all <- st_intersection(aoi %>% st_transform(3347), nom_cad %>% st_make_valid()) %>%
pull(crs) %>%
unique() # solves multipart polygon issues
utmzone_all
valid_zones <- list.files("M:\\VLCE2.0_1984-2021") %>%
str_split("_") %>%
sapply("[", 2)
valid_zones
utmzone_all <- utmzone_all[utmzone_all %in% valid_zones]
utmzone_all <- utmzone_all[!(utmzone_all %in% c("11N", "12N"))]
print(paste0("AOI is located in ", length(utmzone_all), " UTM zones: "))
print(utmzone_all)
print("Note that letters N or S correspond to the internal NTEMS data division, not northern or southern hemishphere")
if(length(utmzone_all > 1)) {
out_crs = crs(rast(template))
}
# add the m in front so it only detects those it should
# without it, 9S would also detect 19S
utm_masks <- str_subset(mask_save_names, paste(paste0("M", utmzone_all), collapse = "|")) %>%
map(vect)
utm_masks
utmzone_all
names(utm_masks) <- utmzone_all
source("C:/Users/evanmuis/Desktop/ntems_cliping_terra/scripts/whole_game_loop_multishps.R", echo=TRUE)
source("C:/Users/evanmuis/Desktop/ntems_cliping_terra/scripts/whole_game.R", echo=TRUE)
plot(aoi)
nom_cad
plot(nom_cad)
plot(nom_cad %>% st_geometry)
plot(aoi %>% st_geometry)
plot(nom_cad %>% st_geometry)
plot(aoi %>% st_geometry, add = T)
plot(nom_cad %>% st_make_valid %>% st_geometry)
plot(aoi %>% st_transform(nom_cad) %>% st_geometry, add = T)
aoi %>% st_transofrm(nom_cad)
aoi %>% st_transform(nom_cad)
aoi
nom_cad
aoi %>% st_make_valid()
aoi %>% st_make_valid() %>% st_transform(nom_cad)
utmzone_all <- st_intersection(aoi %>% st_transform(3347) %>% st_make_valid, nom_cad %>% st_make_valid()) %>%
pull(crs) %>%
unique() # solves multipart polygon issues
utmzone_all
aoi
source("C:/Users/evanmuis/Desktop/ntems_cliping_terra/scripts/whole_game.R", echo=TRUE)
valid_zones
utmzone_all <- st_intersection(aoi %>% st_transform(3347) %>% st_make_valid, nom_cad %>% st_make_valid()) %>%
pull(crs) %>%
unique() # solves multipart polygon issues
valid_zones <- list.files("M:\\VLCE2.0_1984-2021") %>%
str_split("_") %>%
sapply("[", 2)
utmzone_all <- utmzone_all[utmzone_all %in% valid_zones]
source("C:/Users/evanmuis/Desktop/ntems_cliping_terra/scripts/whole_game.R", echo=TRUE)
mask_save_names
?terra::mask
source("C:/Users/evanmuis/Desktop/ntems_cliping_terra/scripts/whole_game.R", echo=TRUE)
source("C:/Users/evanmuis/Desktop/ntems_cliping_terra/scripts/whole_game.R", echo=TRUE)
start_time <- Sys.time()
library("tidyverse")
library("terra")
library("sf")
# temp file locations
terra_temp <-
"D:\\Temp" # save in variable because used in ntems_mosaic_gdal()
terraOptions(
memfrac = 0.75,
tempdir = terra_temp,
todisk = FALSE,
progress = 100
)
#### user inputs ####
aoi_path <-
"Z:\\ByUser\\Muise\\francois2\\Shapefiles\\Study_Area_M_nineS.shp"
listed_shps <-
list.files(
"Y:/Muise/francois3/projected",
full.names = T,
pattern = ".shp$"
)
listed_shps
listed_shps <-
list.files(
"Z:/ByUser/Muise/francois3/projected",
full.names = T,
pattern = ".shp$"
)
listed_shps
source("C:/Users/evanmuis/Desktop/ntems_cliping_terra/scripts/whole_game_loop_multishps.R", echo=TRUE)
source("C:/Users/evanmuis/Desktop/ntems_cliping_terra/scripts/whole_game_loop_multishps.R", echo=TRUE)
library(tidyverse)
library(sf)
zones <- c(7:11)
years <- c(1985:2021)
fun_df <- crossing(zones, years)
zones_iter <- fun_df %>%
pull(zones)
years_iter <- fun_df %>%
pull(years)
load_sfs <- function(zone, year) {
filename <-
paste0("Logic_Rules_Change_Attribution_UTM_",
zone,
"S_",
year,
".shp")
sf <-
st_read(
here::here(
"N:/",
paste0("UTM_", zone, "S"),
"Results",
"Change_attribution",
"Changes_attributed_logic_rules",
filename
)
)
clean_sf <- sf %>%
filter(GIVEN_CLASS == "Fire") %>%
select(GIVEN_CLASS, geometry) %>%
mutate(zone = paste0(zone, "S"),
year = year)
}
output <- map2(.x = zones_iter, .y = years_iter, .f = load_sfs) %>%
map(st_transform, crs = 3005) %>%
bind_rows() %>%
st_intersection(bcmaps::bc_bound())
source("C:/Users/evanmuis/Desktop/ntems_cliping_terra/scripts/frederick_fires.R", echo=TRUE)
output
class(output)
output %>% group_by(year)
output %>% group_by(year) %>% st_union()
.Last.value()
?aggregate
